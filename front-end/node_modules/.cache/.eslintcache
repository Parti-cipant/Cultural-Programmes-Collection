[{"D:\\Documents\\GitHub\\CSCI2720-Group-20\\front-end\\src\\index.js":"1","D:\\Documents\\GitHub\\CSCI2720-Group-20\\front-end\\src\\login.js":"2","D:\\Documents\\GitHub\\CSCI2720-Group-20\\front-end\\src\\admin.js":"3"},{"size":33480,"mtime":1702653588426,"results":"4","hashOfConfig":"5"},{"size":4811,"mtime":1702653588432,"results":"6","hashOfConfig":"5"},{"size":20656,"mtime":1702651430235,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"19r2b4e",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"D:\\Documents\\GitHub\\CSCI2720-Group-20\\front-end\\src\\index.js",["19","20"],[],"/** I declare that the lab work here submitted is original\r\n    except for source material explicitly acknowledged,\r\n    and that the same or closely related material has not been\r\n    previously submitted for another course.\r\n    I also acknowledge that I am aware of University policy and\r\n    regulations on honesty in academic work, and of the disciplinary\r\n    guidelines and procedures applicable to breaches of such\r\n    policy and regulations, as contained in the website.\r\n\r\n    University Guideline on Academic Honesty:\r\n    https://www.cuhk.edu.hk/policy/academichonesty/\r\n    \r\n    Student Name : LUI, Chak Sum; LIU, Angus Chak Hei; CHEUNG, Hop Cheung; Liu Xianlong; Zheng Cun Hao\r\n    Student ID : 1155158054; 1155159671; 1155191857; 1155191419; 1155144508\r\n    Class/Section : CSCI2720\r\n    Date : 6/12/2023 */\r\n\r\n    import ReactDOM from 'react-dom/client';\r\n    import React, { useState } from \"react\";\r\n    import \"./style.css\";\r\n    import \"leaflet/dist/leaflet.css\";\r\n    import { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\n    import { Icon } from \"leaflet\";\r\n    import {\r\n      BrowserRouter,\r\n      Routes,\r\n      Route,\r\n      Link,\r\n      useParams,\r\n      useLocation,\r\n    } from 'react-router-dom';\r\n    import Login from \"./login.js\"\r\n    import Admin from \"./admin.js\"\r\n\r\n    // Global Var for class Map\r\n    const customIcon = new Icon({\r\n      iconUrl: require(\"./icon.png\"),\r\n      iconSize: [38, 38] // size of the icon\r\n    });\r\n    \r\n    // Since other part is not set up yet, testing variable are declared here\r\n    let isAdmin = true;\r\n    let username = \"tester1\";\r\n    const event = [\r\n      {eventId: 1, title: \"event1\", venue: \"SHB\", dateortime: \"6/12/2023\", description: \"This is a testing event!\", presenter:\"Sam\", price:100},\r\n      {eventId: 2, title: \"event2\", venue: \"LSB\", dateortime: \"6/12/2023\", description: \"testing event obviously\", presenter:\"Angus\", price:50} \r\n    ]\r\n    const loc = [\r\n      {locId: 1, name:\"SHB\", noofevent: 1, latitude: 22.419780, longtitude: 114.205951},\r\n      {locId: 2, name:\"LSB\", noofevent: 2, latitude: 22.418914, longtitude: 114.206923},\r\n    ]\r\n    const favloc = [\r\n      {locId: 1, name:\"SHB\", noofevent: 1, latitude: 22.419780, longtitude: 114.205951}\r\n    ]\r\n\r\n    let lastUpdate = \"6/12/2023 9:30\";\r\n    let loginState = true;\r\n    \r\n    class App extends React.Component{\r\n      \r\n      // Declared all the variables as state so that we can change them \r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          isAdmin: isAdmin,\r\n          username: username,\r\n          event: event,\r\n          loc: loc,\r\n          favloc: favloc,\r\n          lastUpdate: lastUpdate,\r\n          login: loginState,\r\n          ID: 0\r\n        };\r\n      }\r\n\r\n      updateFavloc = (updatedFavloc) => {\r\n        this.setState({ favloc: updatedFavloc });\r\n      };\r\n\r\n      handleLogout = () => {\r\n        this.setState({ login: false });\r\n      };\r\n\r\n      // when login, update the last update time and date\r\n      handleLogin = (input) => {\r\n        if (input.isAdmin) {\r\n          this.setState({ login: true, lastUpdate: new Date().toLocaleString(), isAdmin: input.isAdmin });\r\n        }\r\n        else {\r\n          this.setState({ login: true, lastUpdate: new Date().toLocaleString(), isAdmin: input.isAdmin, ID: input.ID });\r\n        }\r\n      }\r\n\r\n      render(){\r\n        // Add a function to handle first load to retrieve xml here\r\n    \r\n        // Check if the event data is loaded\r\n        if (this.state.login === false) {\r\n          return <Login onLogin={this.handleLogin} />\r\n        }\r\n\r\n        if (this.state.lastUpdate != null) {\r\n          // Check if the user is admin or not\r\n          if (this.state.isAdmin === true) {\r\n            // Admin page\r\n            console.log(\"login as admin\");\r\n            return <Admin onLogout={this.handleLogout}/>\r\n          } else {\r\n            // User page\r\n            console.log(\"login as user\");\r\n            return(\r\n              <BrowserRouter>\r\n                <Logout name={this.state.username} onLogout={this.handleLogout} />\r\n                <Title />\r\n                <div>\r\n                  <nav>\r\n                    <ul>\r\n                      <Link to=\"/\"><li>Home</li></Link>\r\n                      <Link to=\"/loc\"><li>Location</li></Link>\r\n                      <Link to=\"/event\"><li>Event</li></Link>\r\n                      <Link to=\"/map\"><li>Map</li></Link>\r\n                      <Link to=\"/favour\"><li>Favourite</li></Link>\r\n                      <Link to=\"/backend\"><li>Backend Testing</li></Link>\r\n                    </ul>\r\n                  </nav>\r\n                </div>\r\n    \r\n                <Routes>\r\n                  <Route path=\"/\" element={<Home lastUpdate={this.state.lastUpdate}/>} />\r\n                  <Route path=\"/loc\" element={<Location data={this.state.loc}/>} />\r\n                  <Route path=\"/map\" element={<Map data={this.state.loc}/>} />\r\n                  <Route path=\"/loc/:locId\" element={<SingleLoc loc={this.state.loc} event={this.state.event} favloc={this.state.favloc} updateFavloc={this.updateFavloc} username={this.state.username}/>} />\r\n                  <Route path=\"/favour\" element={<Favour data={this.state.favloc} updateFavloc={this.updateFavloc}/>} />\r\n                  <Route path=\"/event\" element={<Event event={this.state.event} loc={this.state.loc}/>} />\r\n                  <Route path=\"/backend\" element={<Backend />} />\r\n                  <Route path=\"*\" element={<NoMatch />} />\r\n                </Routes>\r\n              </BrowserRouter>\r\n            )\r\n          }\r\n        } \r\n      }\r\n    }\r\n    \r\n    function NoMatch() {\r\n      let location = useLocation();\r\n      return (\r\n        <div>\r\n          <h3>\r\n            No match for <code>{location.pathname}</code>\r\n          </h3>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    class Logout extends React.Component {\r\n      logout = () => {\r\n        if (window.confirm(\"You are logging out. Are you sure?\")) {\r\n          this.props.onLogout();\r\n        }\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <div>\r\n            <div id=\"logout\">\r\n              <i>Welcome, {this.props.name}</i>\r\n              <button type=\"button\" id=\"logout\" className=\"btn\" onClick={this.logout}>\r\n                Log out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    class Home extends React.Component {\r\n      render() {\r\n        return (\r\n          <>\r\n          <section>\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <h3>Welcome to the Cultural Programmes Collection Website <i class=\"bi bi-calendar-check\"></i></h3>\r\n                <p>\r\n                  In our website, we collected some cultural programmes that host in 10 venues. You can check the event title, venue, date/time, description, presenter, price here.\r\n                </p>\r\n                <p>\r\n                  In Location, all locations are listed in table as links to single locations page.\r\n                </p>\r\n                <p>\r\n                  In Event, you can see all the events information and search for events with specific range of price.\r\n                </p>\r\n                <p>\r\n                  In Map, all locations are showed in map with links to single locations page.\r\n                </p>\r\n                <p>\r\n                  In Favourite Location, you can see your favorite location list.\r\n                </p>\r\n                <p>\r\n                  <sub><i>Source: Cultural Programmes from <a href=\"https://data.gov.hk/en-data/dataset/hk-lcsd-event-event-cultural\"> DATA.GOV.HK</a></i></sub>\r\n                  <br />\r\n                  <sub>Last Updated Time: {this.props.lastUpdate}</sub>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </>\r\n        )\r\n      }\r\n    }\r\n    \r\n    // link to single location, allow sorting with number of event, search with keyword\r\n    class Location extends React.Component {\r\n    \r\n      constructor(props) {\r\n        super(props);\r\n    \r\n        // sortevent records users' sorting option\r\n        // searchloc records users' searching keyword\r\n        // output records the location name with number of events that fulfill users' requirement \r\n        this.state = {\r\n          sortevent: \"nosort\",\r\n          searchloc: \"\",\r\n          output: [],\r\n        };\r\n      }\r\n    \r\n      // When user click search button, store the input into searchloc\r\n      handleSearch = () => {\r\n        const inputValue = document.getElementById('searchInput').value;\r\n        this.setState({ searchloc: inputValue });\r\n      };\r\n    \r\n      // When user click sort radio, store the sorting option into sortevent\r\n      handleSort = (event) => {\r\n        const selectedSortChoice = event.target.value;\r\n        this.setState({ sortevent: selectedSortChoice });\r\n      };\r\n    \r\n      filterAndSortData = () => {\r\n        let filteredLoc = this.props.data;\r\n      \r\n        // Filter the loc array based on the searchloc substring if it is not empty\r\n        if (this.state.searchloc.trim() !== '') {\r\n          filteredLoc = this.props.data.filter((item) =>\r\n            item.name.toLowerCase().includes(this.state.searchloc.toLowerCase())\r\n          );\r\n        }\r\n      \r\n        let sortedLoc = filteredLoc;\r\n      \r\n        // Sort the filteredLoc array based on the sortevent value if it is not \"nosort\"\r\n        if (this.state.sortevent === 'ascending') {\r\n          sortedLoc.sort((a, b) => a.noofevent - b.noofevent);\r\n        } else if (this.state.sortevent === 'descending') {\r\n          sortedLoc.sort((a, b) => b.noofevent - a.noofevent);\r\n        }\r\n      \r\n        // Update the output state with the filtered and sorted array\r\n        this.setState({ output: sortedLoc });\r\n      };\r\n    \r\n      async componentDidMount() {\r\n        this.filterAndSortData();\r\n\r\n        console.log('yeaah');\r\n        const response = await fetch('https://www.lcsd.gov.hk/datagovhk/event/events.xml', {\r\n          method: 'GET'\r\n        });\r\n        console.log(response? 'yes': 'no');\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(await response.body,\"text/xml\");\r\n        console.log(xmlDoc);\r\n      }\r\n    \r\n      componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n          prevState.searchloc !== this.state.searchloc ||\r\n          prevState.sortevent !== this.state.sortevent\r\n        ) {\r\n          this.filterAndSortData();\r\n        }\r\n      }\r\n    \r\n      render() {\r\n        const { output, sortevent } = this.state;\r\n        return (\r\n          <div>\r\n              <section>\r\n                <div>\r\n                  <label for=\"searchInput\">Search with keyword: </label>\r\n                  <input type=\"text\" id=\"searchInput\" placeholder=\"Enter keyword\"/>\r\n                  <input type=\"button\" value=\"Search\" onClick={this.handleSearch}/>\r\n                </div>\r\n                <hr/>\r\n                <fieldset>\r\n                  <legend>Sort by number of events:</legend>\r\n                  <div>\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"nosorting\"\r\n                      name=\"sorting\"\r\n                      value=\"nosort\"\r\n                      onChange={this.handleSort}\r\n                      checked={sortevent === 'nosort'}\r\n                    />\r\n                    <label htmlFor=\"nosorting\">No sorting</label>\r\n                  </div>\r\n                  <div>\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"ascending\"\r\n                      name=\"sorting\"\r\n                      value=\"ascending\"\r\n                      onChange={this.handleSort}\r\n                      checked={sortevent === 'ascending'}\r\n                    />\r\n                    <label htmlFor=\"ascending\">Ascending</label>\r\n                  </div>\r\n                  <div>\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"descending\"\r\n                      name=\"sorting\"\r\n                      value=\"descending\"\r\n                      onChange={this.handleSort}\r\n                      checked={sortevent === 'descending'}\r\n                    />\r\n                    <label htmlFor=\"descending\">Descending</label>\r\n                  </div>\r\n                </fieldset>\r\n                </section><section>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th scope=\"col\">Location</th>\r\n                      <th scope=\"col\">No. of Events</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {output.map((file, index) => <TRL i={index} key={index} data={output} />)}\r\n                  </tbody>\r\n                </table>\r\n              </section>\r\n            </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    // TRL: Table Row for Location, handle the dynamic content of the table \r\n    class TRL extends React.Component {\r\n      render() {\r\n        let i = this.props.i;\r\n        let link = '/loc/' + this.props.data[i].locId;\r\n        return (\r\n          <tr>\r\n            <td>\r\n              <Link to={link}> {this.props.data[i].name}</Link>\r\n            </td>\r\n            <td>{this.props.data[i].noofevent}</td>\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n    \r\n    // link to each single location, use API e.g. Google Maps\r\n    class Map extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          selectedMarker: null\r\n        };\r\n      }\r\n    \r\n      handleMarkerClick = (marker) => {\r\n        this.setState({ selectedMarker: marker });\r\n      };\r\n    \r\n      render() {\r\n        const { selectedMarker } = this.state;\r\n        return (\r\n          <section id=\"maps\">\r\n          <div id=\"map1\" class=\"map-container\">\r\n            <MapContainer center={[this.props.data[0].latitude, this.props.data[0].longtitude]} zoom={17}>\r\n              <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n              {this.props.data.map((marker) => (\r\n                <Marker\r\n                  key={marker.locId}\r\n                  position={[marker.latitude, marker.longtitude]} \r\n                  icon={selectedMarker === marker ? customIcon : customIcon}\r\n                  eventHandlers={{ click: () => this.handleMarkerClick(marker) }}\r\n                >\r\n                  <Popup><Link to={\"/loc/\" + marker.locId}>{marker.name}</Link></Popup> \r\n                </Marker>\r\n              ))}\r\n            </MapContainer>\r\n          </div>\r\n          </section>\r\n        );\r\n      }\r\n    }\r\n\r\n    class Singlemap extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          selectedMarker: null\r\n        };\r\n      }\r\n    \r\n      handleMarkerClick = (marker) => {\r\n        this.setState({ selectedMarker: marker });\r\n      };\r\n    \r\n      render() {\r\n        const { selectedMarker } = this.state;\r\n        return (\r\n\r\n          <div id=\"map2\" class=\"map-container\">\r\n            <MapContainer center={[this.props.data[0].latitude, this.props.data[0].longtitude]} zoom={17} class=\"singlemap\">\r\n              <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n              {this.props.data.map((marker) => (\r\n                <Marker\r\n                  key={marker.locId}\r\n                  position={[marker.latitude, marker.longtitude]} \r\n                  icon={selectedMarker === marker ? customIcon : customIcon}\r\n                  eventHandlers={{ click: () => this.handleMarkerClick(marker) }}\r\n                >\r\n                  <Popup><Link to={\"/loc/\" + marker.locId}>{marker.name}</Link></Popup> \r\n                </Marker>\r\n              ))}\r\n            </MapContainer>\r\n          </div>\r\n\r\n        );\r\n      }\r\n    }\r\n\r\n    // list favourite location in table\r\n    class Favour extends React.Component {\r\n        \r\n        render() {\r\n          return(\r\n            <section>\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <p>Your Favourite Location:</p>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th scope=\"col\">Location</th>\r\n                      <th scope=\"col\">No. of Events</th>\r\n                      <th scope=\"col\">Action</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {this.props.data.map((file, index) => <TRF i={index} key={index} data={this.props.data} updateFavloc={this.props.updateFavloc}/>)}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </section>\r\n          )\r\n          \r\n        }\r\n    }\r\n\r\n    // TRF: Table Row for Favourite, handle the dynamic content of the table \r\n    class TRF extends React.Component {\r\n      deleteRow = () => {\r\n        const { i, data, updateFavloc } = this.props;\r\n        const updatedFl = [...data];\r\n        updatedFl.splice(i, 1);\r\n        updateFavloc(updatedFl);\r\n      };\r\n    \r\n      render() {\r\n        let i = this.props.i;\r\n        let link = '/loc/' + this.props.data[i].locId;\r\n        return (\r\n          <tr>\r\n            <td>\r\n              <Link to={link}> {this.props.data[i].name}</Link>\r\n            </td>\r\n            <td>{this.props.data[i].noofevent}</td>\r\n            <td>\r\n              <button \r\n                  type=\"button\"\r\n                  className=\"btn btn-link x-circle\"\r\n                  onClick={this.deleteRow}\r\n                >\r\n                  <i class=\"bi bi-x-circle-fill\" style={{ color: 'red' }}></i>\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Single location page, containing map show loc, loc details, user comments (can add)\r\n    function SingleLoc(props) {\r\n      const { locId } = useParams();\r\n      const selectedLocation = props.loc.find(\r\n        (location) => location.locId === parseInt(locId)\r\n      );\r\n      const filteredEvents = props.event.filter(\r\n        (event) => event.venue === selectedLocation.name\r\n      );\r\n    \r\n      // Check if the location is the user's favourite location, and allow user's to add/remove it to/from the favourite location\r\n      const isFavorite = props.favloc.some(\r\n        (favLocation) => favLocation.locId === selectedLocation.locId\r\n      );\r\n\r\n      const toggleFavorite = () => {\r\n        if (isFavorite) {\r\n          const updatedFavloc = props.favloc.filter(\r\n            (favLocation) => favLocation.locId !== selectedLocation.locId\r\n          );\r\n          props.updateFavloc(updatedFavloc);\r\n        } else {\r\n          const newFavloc = [...props.favloc, selectedLocation];\r\n          props.updateFavloc(newFavloc);\r\n        }\r\n        console.log(props.favloc);\r\n      };\r\n    \r\n      const [comment, setComment] = useState(\"\");\r\n      const [comments, setComments] = useState([]);\r\n    \r\n      const handleCommentChange = (event) => {\r\n        setComment(event.target.value);\r\n      };\r\n    \r\n      const addComment = () => {\r\n        if (comment.trim() !== \"\") {\r\n          const newComment = {\r\n            id: comments.length + 1,\r\n            username: props.username,\r\n            comment: comment.trim()\r\n          };\r\n    \r\n          setComments((prevComments) => [...prevComments, newComment]);\r\n          setComment(\"\"); // Clear the comment input field after adding the comment\r\n        }\r\n      };\r\n    \r\n      return (\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"d-flex align-items-center\">\r\n                <h2>{selectedLocation.name}</h2>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-link heart-button\"\r\n                  onClick={toggleFavorite}\r\n                >\r\n                  {isFavorite ? (\r\n                    <i className=\"bi bi-heart-fill\" style={{ color: 'red' }}></i>\r\n                  ) : (\r\n                    <i className=\"bi bi-heart\" style={{ color: 'black' }}></i>\r\n                  )}\r\n                </button>\r\n              </div>\r\n              <p>No. of Events: {selectedLocation.noofevent}</p>\r\n              <Singlemap data={[selectedLocation]} />\r\n              {/* Event Details */}\r\n              <h2>Event holding:</h2>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Event</th>\r\n                    <th scope=\"col\">Venue</th>\r\n                    <th scope=\"col\">Date/Time</th>\r\n                    <th scope=\"col\">Description</th>\r\n                    <th scope=\"col\">Presenter</th>\r\n                    <th scope=\"col\">Price (HK$)</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {filteredEvents.map((event, index) => (\r\n                    <TRS key={index} event={event} />\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n    \r\n              {/* User Comments */}\r\n              <h3>Comments:</h3>\r\n              <div id=\"comment\">\r\n                <div id=\"comment_container\">\r\n                  <div id=\"comments\">\r\n                    {comments.map((comment) => (\r\n                       <div key={comment.id} id={`c${comment.id}`} className=\"d-flex\">\r\n                        <div className=\"flex-shrink-0\"></div>\r\n                        <div className=\"flex-grow-1\">\r\n                        <h5>{comment.username}</h5>\r\n                        <p>{comment.comment}</p>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <h6>Add your comment:</h6>\r\n                  <form>\r\n                    <div className=\"mb-3\">\r\n                      <label htmlFor=\"new-comment\" className=\"form-label\">\r\n                        Comment\r\n                      </label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        id=\"new-comment\"\r\n                        rows=\"3\"\r\n                        required\r\n                        value={comment}\r\n                        onChange={handleCommentChange}\r\n                      ></textarea>\r\n                      <div className=\"invalid-feedback\">\r\n                        Please enter your comment.\r\n                      </div>\r\n                    </div>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary\"\r\n                      onClick={addComment}\r\n                    >\r\n                      Add comment\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      );\r\n    }\r\n\r\n    // TRS: Table Row for Single location, handle the dynamic content of the table\r\n    class TRS extends React.Component {\r\n      render() {\r\n        const { event } = this.props;\r\n    \r\n        return (\r\n          <tr>\r\n            <td>{event.title}</td>\r\n            <td>{event.venue}</td>\r\n            <td>{event.dateortime}</td>\r\n            <td>{event.description}</td>\r\n            <td>{event.presenter}</td>\r\n            <td>{event.price}</td>\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Show events whose price under a specific no.\r\n    class Event extends React.Component {\r\n    \r\n      constructor(props) {\r\n        super(props);\r\n    \r\n        // sliderValue records the slider value\r\n        // output records the events with price that fulfill users' requirement \r\n        this.state = {\r\n          sliderValue: 0,\r\n          output: [],\r\n        };\r\n      }\r\n\r\n      // Find the min and max price of events exist\r\n      findMinMaxPrice = (event) => {\r\n        let minPrice = Infinity;\r\n        let maxPrice = -Infinity;\r\n      \r\n        for (let i = 0; i < event.length; i++) {\r\n          const currentPrice = event[i].price;\r\n          if (currentPrice < minPrice) {\r\n            minPrice = currentPrice;\r\n          }\r\n          if (currentPrice > maxPrice) {\r\n            maxPrice = currentPrice;\r\n          }\r\n        }\r\n      \r\n        return {\r\n          minPrice: minPrice,\r\n          maxPrice: maxPrice\r\n        };\r\n      }\r\n\r\n      handleSliderChange = (event) => {\r\n        const sliderValue = parseInt(event.target.value);\r\n        this.setState({ sliderValue });\r\n      };\r\n\r\n      filterData = () => {\r\n        const { event } = this.props;\r\n        const { sliderValue } = this.state;\r\n      \r\n        // Filter the event array based on the sliderValue state\r\n        const filteredEvent = event.filter(event => event.price <= sliderValue);\r\n      \r\n        // Update the output state with the filtered array\r\n        this.setState({ output: filteredEvent });\r\n      };\r\n\r\n      componentDidMount() {\r\n        const { event } = this.props;\r\n        const { maxPrice } = this.findMinMaxPrice(event);\r\n      \r\n        // Set initial slider value and update state\r\n        const sliderValue = maxPrice;\r\n        this.setState({ sliderValue });\r\n      \r\n        this.filterData();\r\n      }\r\n\r\n      componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n          prevState.sliderValue !== this.state.sliderValue\r\n        ) {\r\n          this.filterData();\r\n        }\r\n      }\r\n\r\n      render() {\r\n        const { event } = this.props;\r\n        const { output, sliderValue } = this.state;\r\n        return (\r\n          <section>\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"slidecontainer\">\r\n                  <label for=\"myRange\">Filter by Price: </label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min={this.findMinMaxPrice(event).minPrice}\r\n                    max={this.findMinMaxPrice(event).maxPrice}\r\n                    value={sliderValue}\r\n                    className=\"slider\"\r\n                    id=\"myRange\"\r\n                    onChange={this.handleSliderChange}\r\n                  />\r\n                  <p>&le; <span id=\"demo\">{\"HK$\"+sliderValue}</span></p>\r\n                </div>\r\n                <br />\r\n                <br />\r\n                <hr />\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th scope=\"col\">Event</th> \r\n                      <th scope=\"col\">Venue</th>\r\n                      <th scope=\"col\">Date/Time</th>\r\n                      <th scope=\"col\">Description</th>\r\n                      <th scope=\"col\">Presenter</th>\r\n                      <th scope=\"col\">Price (HK$)</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {output.map((file, index) => <TRE i={index} key={index} event={output} loc={this.props.loc}/>)}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        );\r\n      }\r\n    }\r\n\r\n    // TRE: Table Row for Events, handle the dynamic content of the table \r\n    class TRE extends React.Component {\r\n      getLocId = (venue) => {\r\n        const { loc } = this.props;\r\n        for (let i = 0; i < loc.length; i++) {\r\n          if (loc[i].name === venue) {\r\n            return loc[i].locId;\r\n          }\r\n        }\r\n        return null;\r\n      };\r\n    \r\n      render() {\r\n        const i = this.props.i;\r\n        const venue = this.props.event[i].venue;\r\n        const locId = this.getLocId(venue);\r\n        const link = locId ? `/loc/${locId}` : '';\r\n    \r\n        return (\r\n          <tr>\r\n            <td>{this.props.event[i].title}</td>\r\n            <td><Link to={link}>{this.props.event[i].venue}</Link></td>\r\n            <td>{this.props.event[i].dateortime}</td>\r\n            <td>{this.props.event[i].description}</td>\r\n            <td>{this.props.event[i].presenter}</td>\r\n            <td>{this.props.event[i].price}</td>\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n    \r\n    class Title extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.slideIndex = 0;\r\n        this.timer = null;\r\n      }\r\n      \r\n      componentDidMount() {\r\n        this.showSlides();\r\n      }\r\n      \r\n      componentWillUnmount() {\r\n        clearTimeout(this.timer);\r\n      }\r\n      \r\n      plusSlides(n) {\r\n        clearTimeout(this.timer);\r\n        this.slideIndex += n;\r\n        this.showSlides();\r\n      }\r\n      \r\n      showSlides() {\r\n        const slides = document.getElementsByClassName(\"mySlides\");\r\n      \r\n        if (this.slideIndex >= slides.length) {\r\n          this.slideIndex = 0;\r\n        }\r\n        if (this.slideIndex < 0) {\r\n          this.slideIndex = slides.length - 1;\r\n        }\r\n      \r\n        slides[this.slideIndex].style.display = \"block\";\r\n\r\n        // Hide all slides first\r\n        for (let i = 0; i < slides.length; i++) {\r\n          slides[i].style.display = \"none\";\r\n        }\r\n      \r\n        // Display the current slide\r\n        slides[this.slideIndex].style.display = \"block\";\r\n      \r\n        // Start the timer for automatic slide change\r\n        this.timer = setTimeout(() => {\r\n          this.slideIndex++;\r\n          this.showSlides();\r\n        }, 7000); // Change slide every 8 seconds\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <div>\r\n            <div className=\"slideshow-container\">\r\n              <div className=\"mySlides\">\r\n                <div className=\"numbertext\">1 / 5</div>\r\n                <img src=\"slides/North_District_Town_Hall.jpg\" style={{ width: '100%', height: '130px', objectFit: 'cover' }} alt=\"Slide 1\" />\r\n                <div className=\"text\">North District Town Hall</div>\r\n              </div>\r\n    \r\n              <div className=\"mySlides\">\r\n                <div className=\"numbertext\">2 / 5</div>\r\n                <img src=\"slides/Sha_Tin_Town_Hall.jpg\" style={{ width: '100%', height: '130px', objectFit: 'cover' }} alt=\"Slide 2\" />\r\n                <div className=\"text\">Sha Tin Town Hall</div>\r\n              </div>\r\n    \r\n              <div className=\"mySlides\">\r\n                <div className=\"numbertext\">3 / 5</div>\r\n                <img src=\"slides/Hong_Kong_Cultural_Centre.jpg\" style={{ width: '100%', height: '130px', objectFit: 'cover' }} alt=\"Slide 3\" />\r\n                <div className=\"text\">Hong Kong Cultural Centre</div>\r\n              </div>\r\n\r\n              <div className=\"mySlides\">\r\n                <div className=\"numbertext\">4 / 5</div>\r\n                <img src=\"slides/Hong_Kong_Science_Museum.jpg\" style={{ width: '100%', height: '130px', objectFit: 'cover' }} alt=\"Slide 4\" />\r\n                <div className=\"text\">Hong Kong Science Museum</div>\r\n              </div>\r\n\r\n              <div className=\"mySlides\">\r\n                <div className=\"numbertext\">5 / 5</div>\r\n                <img src=\"slides/Hong_Kong_Film_Archive.jpg\" style={{ width: '100%', height: '130px', objectFit: 'cover' }} alt=\"Slide 5\" />\r\n                <div className=\"text\">Hong Kong Film Archive</div>\r\n              </div>\r\n    \r\n              <a className=\"prev\" onClick={() => this.plusSlides(-1)}>&#10094;</a>\r\n              <a className=\"next\" onClick={() => this.plusSlides(1)}>&#10095;</a>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    // The backend team use it for testing\r\n    class Backend extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          output: ''\r\n        };\r\n      }\r\n\r\n      handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const ID = document.querySelector('#ID').value;\r\n        const password = document.querySelector('#password').value;\r\n        const isAdmin = document.querySelector('#isAdmin').checked;\r\n        const data = {\r\n          ID: ID,\r\n          password: password,\r\n          isAdmin: isAdmin\r\n        };\r\n\r\n        const response = await fetch('http://localhost:3000/account/create', {\r\n          method: \"POST\",\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(data)\r\n        });\r\n\r\n        this.setState({output: response});\r\n      };\r\n\r\n      render() {\r\n        \r\n\r\n        return (\r\n          <div>\r\n            <form id=\"createDocument\" onSubmit={this.handleSubmit}>\r\n              <label for=\"ID\">User Name:</label>\r\n              <input type=\"text\" id=\"ID\" name='ID' />\r\n              <br />\r\n              <label for=\"password\">Password:</label>\r\n              <input type=\"text\" id=\"password\" name='password' />\r\n              <br />\r\n              <label for=\"isAdmin\">Login as admin?</label>\r\n              <input type=\"checkbox\" id=\"isAdmin\" name='isAdmin' />\r\n              <br />\r\n              <input type=\"submit\" value=\"Submit\"/>\r\n            </form>\r\n\r\n            <div>\r\n              <p>Here is the output:</p>\r\n              <pre id='output'>{this.state.output}</pre>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    const root = ReactDOM.createRoot(document.querySelector(\"#app\"));\r\n    root.render( <App />);\r\n","D:\\Documents\\GitHub\\CSCI2720-Group-20\\front-end\\src\\login.js",[],[],"D:\\Documents\\GitHub\\CSCI2720-Group-20\\front-end\\src\\admin.js",["21","22","23","24","25","26","27","28","29","30","31","32","33","34","35"],[],"import ReactDOM from 'react-dom/client';\r\nimport React, { useState } from \"react\";\r\nimport \"./style.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport { Icon } from \"leaflet\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n  Link,\r\n  useParams,\r\n  useLocation,\r\n} from 'react-router-dom';\r\nimport $ from 'jquery';\r\nlet title = \"Cultural Programmes Collection Website\";\r\n\r\nconst fakeData_Event = [{\"ID\":1,\"name\":\"Errol\",\"price\":32,\"quota\":45},\r\n{\"ID\":2,\"name\":\"Bobbe\",\"price\":71,\"quota\":9},\r\n{\"ID\":3,\"name\":\"Pasquale\",\"price\":19,\"quota\":36},\r\n{\"ID\":4,\"name\":\"Maridel\",\"price\":92,\"quota\":88},\r\n{\"ID\":5,\"name\":\"Arthur\",\"price\":47,\"quota\":99},\r\n{\"ID\":6,\"name\":\"Joleen\",\"price\":97,\"quota\":15},\r\n{\"ID\":7,\"name\":\"Jeanne\",\"price\":31,\"quota\":65},\r\n{\"ID\":8,\"name\":\"Rachel\",\"price\":8,\"quota\":33},\r\n{\"ID\":9,\"name\":\"Hildagarde\",\"price\":68,\"quota\":34},\r\n{\"ID\":10,\"name\":\"Glenn\",\"price\":86,\"quota\":74}]\r\n\r\nconst fakeData_User = [{\r\n  \"ID\": 1,\r\n  \"username\": \"lfeary0\",\r\n  \"password\": \"sM9>?S_LN\",\r\n  \"isAdmin\": false\r\n}, {\r\n  \"ID\": 2,\r\n  \"username\": \"ecoan1\",\r\n  \"password\": \"kD0!T=yOzH*3t?o\",\r\n  \"isAdmin\": false\r\n}, {\r\n  \"ID\": 3,\r\n  \"username\": \"kcroux2\",\r\n  \"password\": \"sA4|Z6<ur~0&}%\",\r\n  \"isAdmin\": true\r\n}, {\r\n  \"ID\": 4,\r\n  \"username\": \"mwolfenden3\",\r\n  \"password\": \"aW2<HRqEa8iw~4~\",\r\n  \"isAdmin\": false\r\n}, {\r\n  \"ID\": 5,\r\n  \"username\": \"lwilcock4\",\r\n  \"password\": \"rW5\\\\/~%T+ad!uX6O\",\r\n  \"isAdmin\": false\r\n}, {\r\n  \"ID\": 6,\r\n  \"username\": \"fsanchis5\",\r\n  \"password\": \"qX0)tOHY\",\r\n  \"isAdmin\": true\r\n}, {\r\n  \"ID\": 7,\r\n  \"username\": \"vdaulton6\",\r\n  \"password\": \"pQ5@kQ)j8tM8\",\r\n  \"isAdmin\": true\r\n}, {\r\n  \"ID\": 8,\r\n  \"username\": \"cbollen7\",\r\n  \"password\": \"yG1.4$S5Iknm\\\"th\",\r\n  \"isAdmin\": false\r\n}, {\r\n  \"ID\": 9,\r\n  \"username\": \"avasilchikov8\",\r\n  \"password\": \"uL0|S6/qQ{lWH\",\r\n  \"isAdmin\": true\r\n}, {\r\n  \"ID\": 10,\r\n  \"username\": \"ebyles9\",\r\n  \"password\": \"rR9+xqh5D+i~\",\r\n  \"isAdmin\": false\r\n}]\r\n\r\nexport default class Admin extends React.Component{\r\n    render() {\r\n       return (\r\n        <div style={{ backgroundColor: \"#FBE8A6\", minHeight: \"100vh\"}}>\r\n          <div className='row' style={{width: \"100%\"}}>\r\n            <Logout onLogout={this.props.onLogout}/>\r\n            <div className='col-sm-1'></div>\r\n            <h1 className='col-sm-8' style={{textAlign: \"center\", marginTop: 0}}>{title}</h1>\r\n          </div>\r\n          <h1 style={{width: \"100%\", textAlign: \"center\", marginTop: 30}}>Admin Dashboard</h1>\r\n          <br />\r\n          <NavTable />\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nclass Logout extends React.Component{\r\n\r\n  render() {\r\n    return (\r\n      <button className='col-sm-1 btn btn-primary' style={{backgroundColor: \"#303C6C\"}} onClick={() => this.props.onLogout()}>Logout</button>\r\n    )\r\n  }\r\n}\r\n\r\nclass NavTable extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {viewEvent: true};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light justify-content-center\" style={{backgroundColor: \"#D2FDFF\", borderTopRightRadius:20, borderTopLeftRadius:20}}>\r\n        <ul className='navbar-nav flex-row' style={{backgroundColor: \"#D2FDFF\"}}>\r\n          <li className='nav-item active' style={{backgroundColor: \"#D2FDFF\"}}>\r\n            <a className='nav-link' href='#event' style={this.state.viewEvent?{fontWeight: \"bolder\", color: \"Highlight\"}:{fontWeight: \"bolder\"}} onClick={() => this.setState({viewEvent: true})}>Events</a>\r\n          </li>\r\n          <li className='nav-item active' style={{marginLeft: \"10vw\", backgroundColor: \"#D2FDFF\"}}>\r\n            <a className='nav-link' href='#user' style={!this.state.viewEvent?{fontWeight: \"bolder\", color: \"Highlight\"}:{fontWeight: \"bolder\"}} onClick={() => this.setState({viewEvent: false})}>Users</a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n        {this.state.viewEvent ? <EventTable /> : <UserTable />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass UserTable extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      edit: undefined,\r\n      add: false,\r\n      accounts: []\r\n    };\r\n  }\r\n\r\n  editHandle = (ID) => {\r\n    this.setState({edit:ID, add:false});\r\n  }\r\n\r\n  addHandle = () => {\r\n    this.setState({add:true, edit:undefined});\r\n  }\r\n\r\n  handleAdd = (newAccount) => {\r\n    this.setState((prev) => ({accounts: [...prev.accounts, newAccount]}));\r\n  }\r\n\r\n  handleUpdate = (newAccount) => {\r\n    let accounts = this.state.accounts;\r\n    accounts.forEach((value, index) => {\r\n      if (value.ID === newAccount.ID) {\r\n        accounts[index] = newAccount\r\n      }\r\n    });\r\n    this.setState({accounts: accounts});\r\n  }\r\n\r\n  handleDelete = (newAccount) => {\r\n    let accounts = this.state.accounts;\r\n    let deleteID;\r\n    accounts.forEach((value, index) => {\r\n      if (value.ID === newAccount.ID) {\r\n        deleteID = index;\r\n      }\r\n    });\r\n    accounts.splice(deleteID, 1);\r\n    this.setState({accounts: accounts});\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      let response = await fetch('http://localhost:3000/account/all', {\r\n        method: 'GET'\r\n      });\r\n      response = await response.json();\r\n\r\n      console.log(response);\r\n\r\n      if (response.success) {\r\n        this.setState({ accounts: response.data });\r\n      }\r\n      else {\r\n        alert(response.data);\r\n      }\r\n    } catch (error) {\r\n      // Handle any errors from the async operation\r\n      console.error('Error fetching data:', error);\r\n      this.setState({ accounts: fakeData_User });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(<table id='event' className=\"table\" style={{backgroundColor: \"#F4976C\"}}>\r\n      <thead>\r\n      <tr key={0}>\r\n        <th style={{width: \"20%\"}}>ID</th>\r\n        <th style={{width: \"20%\"}}>Username</th>\r\n        <th style={{width: \"20%\"}}>Password</th>\r\n        <th style={{width: \"15%\"}}>Account Type</th>\r\n        <th style={{width: \"25%\"}}><button className='btn btn-info' style={{paddingTop:0, paddingBottom:0}} onClick={this.addHandle}><i className=\"bi bi-plus-square\" style={{marginRight:4}}></i>Add</button></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {this.state.add?\r\n          <AddUser Cancel={() => this.setState({add:false})} onAdd={this.handleAdd} />\r\n        :<></>}\r\n        {this.state.accounts.map((data) => <UserTableRow data={data} edit_id={this.state.edit} edit={this.editHandle} onAdd={this.handleAdd} onUpdate={this.handleUpdate} onDelete={this.handleDelete} />)}\r\n      </tbody>\r\n  </table>)\r\n  }\r\n}\r\n\r\nclass UserTableRow extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      usernameInput: undefined,\r\n      passwordInput: undefined,\r\n      isAdmin: false\r\n    };\r\n  }\r\n\r\n  handleConfirm = async () => {\r\n    try {\r\n      const data = {\r\n        username: this.state.usernameInput,\r\n        ID: this.props.edit_id,\r\n        password: this.state.passwordInput,\r\n        isAdmin: this.state.isAdmin\r\n      };\r\n\r\n      const respond = await fetch('http://localhost:3000/account/update', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n      const response = await respond.json();\r\n      if (response.success) {\r\n        this.props.onUpdate(response.data);\r\n      }\r\n    } catch (error) {\r\n      // Handle any errors from the async operation\r\n      console.error('Error fetching data:', error);\r\n    }\r\n    this.setState({usernameInput: '',\r\n    passwordInput: ''})\r\n    this.props.edit(undefined)\r\n  }\r\n\r\n  handleDelete = async () => {\r\n    try {\r\n      const data = {\r\n        ID: this.props.data[\"ID\"],\r\n      };\r\n\r\n      console.log(data);\r\n\r\n      let response = await fetch('http://localhost:3000/account/delete', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n      \r\n      response = await response.json();\r\n      if (response.success) {\r\n        this.props.onDelete(response.data);\r\n      }\r\n      else {\r\n        alert(response.data);\r\n      }\r\n    }\r\n     catch (error) {\r\n      // Handle any errors from the async operation\r\n      console.error('Error fetching data:', error);\r\n    }\r\n    this.setState({usernameInput: '',\r\n    passwordInput: ''})\r\n    this.props.edit(undefined)\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.setState({\r\n      usernameInput: '',\r\n      passwordInput: ''\r\n    });\r\n    this.props.edit(undefined)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <tr key={this.props.data[\"ID\"]}>\r\n        <th>{this.props.data[\"ID\"]}</th>\r\n        <th>\r\n          {this.props.edit_id === this.props.data[\"ID\"]?\r\n              <input placeholder={this.props.data[\"username\"]}\r\n              value = {this.state.usernameInput}\r\n              onChange={(e) => this.setState({usernameInput: e.target.value})} />:\r\n              this.props.data[\"username\"]}\r\n        </th>\r\n        <th>{this.props.edit_id === this.props.data[\"ID\"]?\r\n              <input placeholder={this.props.data[\"password\"]}\r\n              value = {this.state.passwordInput}\r\n              onChange={(e) => this.setState({passwordInput: e.target.value})} />:\r\n              this.props.data[\"password\"]}</th>\r\n        <th>{this.props.edit_id === this.props.data[\"ID\"]?\r\n             <select name='isAdmin' value = {this.state.isAdmin} onChange={(e) => this.setState({isAdmin: e.target.value})}>\r\n              <option value=\"false\">User</option>\r\n              <option value=\"true\">Admin</option>\r\n             </select>:\r\n              this.props.data[\"isAdmin\"]? 'Admin' : 'User'\r\n              }</th>\r\n        <th>\r\n          <button className='btn' style={{maxHeight:35}} onClick={() => this.props.edit(this.props.data[\"ID\"])}><i className=\"bi bi-pencil-square\"/></button>\r\n          <button className='btn' style={{maxHeight:35}} onClick={this.handleDelete}><i className=\"bi bi-trash3\"/></button>\r\n          {this.props.edit_id === this.props.data[\"ID\"]?<button className='btn btn-success' onClick={this.handleConfirm}>Confirm</button>:<></>}\r\n          {this.props.edit_id === this.props.data[\"ID\"]?<button className='btn btn-danger' onClick={this.handleCancel} style={{marginLeft:2, marginBottom:4}}>Cancel</button>:<></>}\r\n          </th>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nclass AddUser extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      usernameInput: '',\r\n      passwordInput: '',\r\n      isAdmin: false\r\n    };\r\n  }\r\n\r\n  handleConfirm = async () => {\r\n    try {\r\n      const data = {\r\n        username: this.state.usernameInput,\r\n        password: this.state.passwordInput,\r\n        isAdmin: this.state.isAdmin === 'true'\r\n      };\r\n\r\n      const respond = await fetch('http://localhost:3000/account/create', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n      const response = await respond.json();\r\n      console.log(response.data);\r\n\r\n      if (response.success) {\r\n        this.props.onAdd(response.data);\r\n      }\r\n    } catch (error) {\r\n      // Handle any errors from the async operation\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <tr key={\"new\"}>\r\n      <th>New</th>\r\n      <th><input type='text' id='id' value = {this.state.usernameInput} onChange={(e) => this.setState({usernameInput: e.target.value})} /></th>\r\n      <th><input type='text' id='password' value = {this.state.passwordInput} onChange={(e) => this.setState({passwordInput: e.target.value})} /></th>\r\n      <th><select name='isAdmin' value = {this.state.isAdmin} onChange={(e) => this.setState({isAdmin: e.target.value})}>\r\n        <option value=\"false\">User</option>\r\n        <option value=\"true\">Admin</option>\r\n        </select></th>\r\n      <th>\r\n        <button className='btn btn-success' onClick={this.handleConfirm}>Confirm</button>\r\n        <button className='btn btn-danger' style={{marginLeft:2, marginBottom:4}} onClick={this.props.Cancel}>Cancel</button>\r\n      </th>\r\n    </tr>\r\n    )\r\n  }\r\n}\r\n\r\nclass EventTable extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      edit: undefined,\r\n      add: false,\r\n      events: [],\r\n      toggle: false\r\n    };\r\n  }\r\n\r\n  editHandle = (ID) => {\r\n    this.setState({edit:ID, add: false});\r\n  }\r\n\r\n  addHandle = () => {\r\n    this.setState({edit:undefined, add: true});\r\n  }\r\n\r\n  handleAdd = (newEvent) => {\r\n    this.setState((prev) => ({events: [...prev.events, newEvent]}));\r\n  }\r\n\r\n  handleUpdated = (newEvent) => {\r\n    let newEvents = this.state.events;\r\n    let id;  \r\n    newEvents.forEach((element, index) => {\r\n      if (element.ID === newEvent.ID) {\r\n        id = index;\r\n        console.log(element);\r\n        console.log(newEvent);\r\n        newEvents[index] = newEvent;\r\n      }\r\n    });\r\n    console.log('event id:', newEvents[id]);\r\n    this.setState({events: newEvents});\r\n    this.setState((prev) => ({toggele: !prev.toggele}));\r\n  }\r\n\r\n  handleDelete = (newEvent) => {\r\n    let newEvents = this.state.events;\r\n    console.log('newEvents: ', newEvents);\r\n    let id;\r\n    newEvents.forEach((element, index) => {\r\n      if (element.ID === newEvent.ID) {\r\n        id = index;\r\n      }\r\n    });\r\n    console.log('id: ', id);\r\n    newEvents.splice(id, 1);\r\n    this.setState({events: newEvents});\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      let response = await fetch('http://localhost:3000/event/all', {\r\n        method: 'GET'\r\n      });\r\n      response = await response.json();\r\n      if (response.success) {\r\n        this.setState({ events: response.data });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      this.setState({ accounts: fakeData_User });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(<table className=\"table\" style={{backgroundColor: \"#F4976C\"}}>\r\n      <thead>\r\n      <tr key={0}>\r\n        <th style={{width: \"15%\", cursor: \"pointer\"}}>ID</th>\r\n        <th style={{width: \"20%\", cursor: \"pointer\"}}>Name</th>\r\n        <th style={{width: \"20%\", cursor: \"pointer\"}}>Price</th>\r\n        <th style={{width: \"20%\", cursor: \"pointer\"}}>Quota</th>\r\n        <th style={{width: \"25%\"}}><button className='btn btn-info' style={{paddingTop:0, paddingBottom:0}} onClick={this.addHandle}><i className=\"bi bi-plus-square\" style={{marginRight:4}}></i>Add</button></th>\r\n\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n        {this.state.add ? <AddEvent Cancel={() => this.setState({add:false})} onAdd={this.handleAdd} /> : <></>}\r\n        {this.state.events.map((data) => <EventTableRow data={data} edit_id={this.state.edit} edit={this.editHandle} edited={this.handleUpdated} onDelete={this.handleDelete} />)}\r\n      </tbody>\r\n  </table>)\r\n  }\r\n}\r\n\r\nclass AddEvent extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      eventNameInput: '',\r\n      eventPriceInput: 1, \r\n      eventQuotaInput: 1\r\n    };\r\n  }\r\n\r\n  handleClick = async () => {\r\n    try {\r\n      const newEvent = {\r\n        name: this.state.eventNameInput,\r\n        price: +this.state.eventPriceInput,\r\n        quota: +this.state.eventQuotaInput\r\n      };\r\n\r\n      console.log(newEvent);\r\n\r\n      let response = await fetch('http://localhost:3000/event/create', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(newEvent)\r\n      });\r\n\r\n      response = await response.json();\r\n      if (response.success) {\r\n        this.props.onAdd(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      this.setState({ accounts: fakeData_User });\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <tr key={\"new\"}>\r\n        <th>New</th>\r\n        <th>\r\n          <input type='text' id='eventNameInput' value={this.state.eventNameInput}\r\n                    onChange={(e) => this.setState({eventNameInput : e.target.value})} />\r\n        </th>\r\n        <th>\r\n          $<input type='number' id='eventPriceInput' value={this.state.eventPriceInput}\r\n                    onChange={(e) => this.setState({eventPriceInput: e.target.value})} min={1} />\r\n        </th>\r\n        <th>\r\n          <input type='number' id='eventQuotaInput' value={this.state.eventQuotaInput}\r\n                    onChange={(e) => this.setState({eventQuotaInput: e.target.value})} min={1} />\r\n        </th>\r\n        <th>\r\n          <button className='btn btn-success' onClick={this.handleClick}>Confirm</button>\r\n          <button className='btn btn-danger' style={{marginLeft:2, marginBottom:4}} onClick={this.props.Cancel}>Cancel</button>\r\n        </th>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nclass EventTableRow extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      eventNameInput: undefined,\r\n      eventPriceInput: undefined,\r\n      eventQuotaInput: undefined\r\n    };\r\n  }\r\n\r\n  handleEdit = async () => {\r\n    try {\r\n      const newEvent = {\r\n        ID: +this.props.edit_id,\r\n        name: this.state.eventNameInput ? this.state.eventNameInput : this.props.data[\"name\"],\r\n        price: this.state.eventPriceInput ? +this.state.eventPriceInput : this.props.data[\"price\"],\r\n        quota: this.state.eventQuotaInput ? +this.state.eventQuotaInput : this.props.data[\"quota\"]\r\n      };\r\n\r\n      let response = await fetch('http://localhost:3000/event/update', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(newEvent)\r\n      });\r\n\r\n      response = await response.json();\r\n      console.log(response);\r\n      if (response.success) {\r\n        this.props.edited(response.data);\r\n      }\r\n      else {\r\n        alert(response.data);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      this.setState({ accounts: fakeData_User });\r\n    }\r\n  }\r\n\r\n  handleDelete = async () => {\r\n    try {\r\n      const newEvent = {\r\n        ID: +this.props.data[\"ID\"],\r\n      };\r\n\r\n      let response = await fetch('http://localhost:3000/event/delete', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(newEvent)\r\n      });\r\n\r\n      response = await response.json();\r\n      console.log(response);\r\n      if (response.success) {\r\n        this.props.onDelete(response.data);\r\n      }\r\n      else {\r\n        alert(response.data);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      this.setState({ accounts: fakeData_User });\r\n    }\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.props.edit(undefined);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tr key={this.props.data[\"ID\"]}>\r\n        <th>{this.props.data[\"ID\"]}</th>\r\n        <th>\r\n          {this.props.edit_id === this.props.data[\"ID\"]?\r\n              <input\r\n              placeholder={this.props.data[\"name\"]}\r\n              value={this.props.eventNameInput}\r\n              onChange={(e) => this.setState({eventNameInput: e.target.value})} />:\r\n              this.props.data[\"name\"]}\r\n        </th>\r\n\r\n        <th>\r\n          ${this.props.edit_id === this.props.data[\"ID\"]?\r\n              <input \r\n              type='number'\r\n              placeholder={this.props.data[\"price\"]}\r\n              value={this.state.eventPriceInput}\r\n              onChange={(e) => this.setState({eventPriceInput: e.target.value})} />:\r\n              this.props.data[\"price\"]}\r\n        </th>\r\n\r\n        <th>\r\n          {this.props.edit_id === this.props.data[\"ID\"]?\r\n              <input \r\n              type='number'\r\n              placeholder={this.props.data[\"quota\"]}\r\n              value={this.state.eventQuotaInput}\r\n              onChange={(e) => this.setState({eventQuotaInput: e.target.value})} />:\r\n              this.props.data[\"quota\"]}\r\n        </th>\r\n\r\n        <th>\r\n          <button className='btn' style={{maxHeight:35}} onClick={() => this.props.edit(this.props.data[\"ID\"])}><i className=\"bi bi-pencil-square\"/></button>\r\n          <button className='btn' style={{maxHeight:35}} onClick={this.handleDelete}><i className=\"bi bi-trash3\"/></button>\r\n          {this.props.edit_id === this.props.data[\"ID\"]?<button className='btn btn-success' onClick={this.handleEdit}>Confirm</button> : <></>}\r\n          {this.props.edit_id === this.props.data[\"ID\"]?<button className='btn btn-danger' onClick={this.handleCancel} style={{marginLeft:2, marginBottom:4}}>Cancel</button> : <></>}\r\n        </th>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n",{"ruleId":"36","severity":1,"message":"37","line":890,"column":15,"nodeType":"38","endLine":890,"endColumn":71},{"ruleId":"36","severity":1,"message":"37","line":891,"column":15,"nodeType":"38","endLine":891,"endColumn":70},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":16},{"ruleId":"39","severity":1,"message":"43","line":2,"column":17,"nodeType":"41","messageId":"42","endLine":2,"endColumn":25},{"ruleId":"39","severity":1,"message":"44","line":5,"column":10,"nodeType":"41","messageId":"42","endLine":5,"endColumn":22},{"ruleId":"39","severity":1,"message":"45","line":5,"column":24,"nodeType":"41","messageId":"42","endLine":5,"endColumn":33},{"ruleId":"39","severity":1,"message":"46","line":5,"column":35,"nodeType":"41","messageId":"42","endLine":5,"endColumn":41},{"ruleId":"39","severity":1,"message":"47","line":5,"column":43,"nodeType":"41","messageId":"42","endLine":5,"endColumn":48},{"ruleId":"39","severity":1,"message":"48","line":6,"column":10,"nodeType":"41","messageId":"42","endLine":6,"endColumn":14},{"ruleId":"39","severity":1,"message":"49","line":8,"column":3,"nodeType":"41","messageId":"42","endLine":8,"endColumn":16},{"ruleId":"39","severity":1,"message":"50","line":9,"column":3,"nodeType":"41","messageId":"42","endLine":9,"endColumn":9},{"ruleId":"39","severity":1,"message":"51","line":10,"column":3,"nodeType":"41","messageId":"42","endLine":10,"endColumn":8},{"ruleId":"39","severity":1,"message":"52","line":11,"column":3,"nodeType":"41","messageId":"42","endLine":11,"endColumn":7},{"ruleId":"39","severity":1,"message":"53","line":12,"column":3,"nodeType":"41","messageId":"42","endLine":12,"endColumn":12},{"ruleId":"39","severity":1,"message":"54","line":13,"column":3,"nodeType":"41","messageId":"42","endLine":13,"endColumn":14},{"ruleId":"39","severity":1,"message":"55","line":15,"column":8,"nodeType":"41","messageId":"42","endLine":15,"endColumn":9},{"ruleId":"39","severity":1,"message":"56","line":18,"column":7,"nodeType":"41","messageId":"42","endLine":18,"endColumn":21},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'MapContainer' is defined but never used.","'TileLayer' is defined but never used.","'Marker' is defined but never used.","'Popup' is defined but never used.","'Icon' is defined but never used.","'BrowserRouter' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'useLocation' is defined but never used.","'$' is defined but never used.","'fakeData_Event' is assigned a value but never used."]